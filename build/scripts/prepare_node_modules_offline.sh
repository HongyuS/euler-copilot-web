#!/bin/bash
# build/scripts/prepare_node_modules_offline.sh
# 用于在有网环境下准备 node_modules 和 pnpm 缓存，实现离线安装
# 用法：在有网环境下运行一次，生成 release/offline_node_modules.tar.gz 和 release/offline_pnpm_store.tar.gz

set -e

WORKDIR=$(cd "$(dirname "$0")/../.." && pwd)
cd "$WORKDIR"

RELEASE_DIR="$WORKDIR/release"
mkdir -p "$RELEASE_DIR"

# 0. 确保已安装 pnpm
if ! command -v pnpm >/dev/null 2>&1; then
    echo "未检测到 pnpm，正在全局安装..."
    npm install -g pnpm
fi
pnpm -v

# 1. 检测架构
ARCH=$(uname -m)
if [[ "$ARCH" == "x86_64" ]]; then
    ARCH_SUFFIX="x64"
elif [[ "$ARCH" == "aarch64" ]]; then
    ARCH_SUFFIX="arm64"
else
    echo "不支持的架构: $ARCH" >&2
    exit 2
fi

# 2. 在 RELEASE_DIR 下创建快照缓存目录
CACHE_DIR="$RELEASE_DIR/offline_build_cache_$ARCH_SUFFIX"
rm -rf "$CACHE_DIR"
mkdir -p "$CACHE_DIR"

# 3. 拷贝当前代码仓内容到缓存目录（排除 .git、release、node_modules、pnpm-lock.yaml）
rsync -a --exclude='.git' --exclude='release' --exclude='node_modules' --exclude='pnpm-lock.yaml' ./ "$CACHE_DIR/"
cd "$CACHE_DIR"

# 3. 安装依赖
pnpm install

# 4. 打包 node_modules 及 pnpm-lock.yaml，并分割为4个分块
if [ -d node_modules ]; then
    if [ -f pnpm-lock.yaml ]; then
        tar -czf "$RELEASE_DIR/offline_node_modules-$ARCH_SUFFIX.tar.gz" node_modules pnpm-lock.yaml
    else
        tar -czf "$RELEASE_DIR/offline_node_modules-$ARCH_SUFFIX.tar.gz" node_modules
    fi
    # 分割为4个分块
    split -d -n 4 -a 1 "$RELEASE_DIR/offline_node_modules-$ARCH_SUFFIX.tar.gz" "$RELEASE_DIR/offline_node_modules-$ARCH_SUFFIX.tar.gz.part"
    rm -f "$RELEASE_DIR/offline_node_modules-$ARCH_SUFFIX.tar.gz"
fi

# 5. 查找 pnpm store 路径，并分割为4个分块
PNPM_STORE=$(pnpm store path)
if [ -d "$PNPM_STORE" ]; then
    tar -czf "$RELEASE_DIR/offline_pnpm_store-$ARCH_SUFFIX.tar.gz" -C "$PNPM_STORE" .
    split -d -n 4 -a 1 "$RELEASE_DIR/offline_pnpm_store-$ARCH_SUFFIX.tar.gz" "$RELEASE_DIR/offline_pnpm_store-$ARCH_SUFFIX.tar.gz.part"
    rm -f "$RELEASE_DIR/offline_pnpm_store-$ARCH_SUFFIX.tar.gz"
fi

echo "已生成 offline_node_modules-$ARCH_SUFFIX.tar.gz.part[0-3] 和 offline_pnpm_store-$ARCH_SUFFIX.tar.gz.part[0-3]，可用于离线环境。"
